version: '3.8'
services:
  catalog:
    image: projectnessie/nessie
#    container_name: catalog
    networks:
      lakehouse:
    ports:
      - "19120:19120"

  trino:
    image: trinodb/trino
#    container_name: trino
    networks:
      lakehouse:
    ports:
      - "8080:8080"
    volumes:
      - "./conf/trino/:/etc/trino/"

  storage:
    image: minio/minio
#    container_name: storage
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=storage
      - MINIO_REGION_NAME=us-east-1
      - MINIO_REGION=us-east-1
    networks:
      lakehouse:
    ports:
      - "9001:9001"
      - "9000:9000"
    command: [ "server", "/data", "--console-address", ":9001" ]
  # Minio Client Container
  mc:
    depends_on:
      - storage
    image: minio/mc
#    container_name: mc
    networks:
      lakehouse:
        aliases:
          - minio.storage
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://storage:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc mb minio/iceberg;
      /usr/bin/mc policy set public minio/warehouse;
      /usr/bin/mc policy set public minio/iceberg;
      tail -f /dev/null
      " 

#  dremio:
#    image: dremio/dremio-oss
##    container_name: dremio
#    networks:
#      lakehouse:
#    ports:
#      - "9047:9047"
  sqlclient:
    image: gethue/hue:latest
    networks:
      lakehouse:
    ports:
      - "8889:8888"

  dagster:
    image: local/dagster:latest
    build: ./lineage
#    container_name: dagster
    networks:
      lakehouse:
    ports:
      - "3000:3000"
    volumes:
      - ./lineage:/opt/dagster/app

  superset:
    image: local/superset
    build: ./superset
#    container_name: superset
    networks:
      lakehouse:
    environment:
      SUPERSET_HOME: /app/superset_home
      SUPERSET_SECRET_KEY: "pass"
      SUPERSET_LOAD_EXAMPLES: "true"
    ports:
      - "8088:8088"


#  spark:
#    image: bitnami/spark
##    container_name: spark
#    networks:
#      lakehouse:
#    ports:
#      - "8888:8888"
#    volumes:
#      - ./spark:/opt/spark

#  cube:
#    image: cubejs/cube
#    container_name: cube
#    hostname: cube
#    volumes:
#      - ./conf/cube:/cube/conf
#    ports:
#      - 3000:3000
#      - 4000:4000
#      - 3245:3245
#    networks:
#      - ndsnet
#    depends_on:
#      - aio

#  cubejs:
#    build: ./cubejs
#    container_name: cubejs
#    ports:
#      - "4000:4000"
#
#  portal_server:
#    build: ./portal/server
#    container_name: portal_server
#    ports:
#      - "4000:4000"
#
#  portal_frontend:
#    build: ./portal/frontend
#    container_name: portal_frontend
#    ports:
#      - "5173:5173"

  homer:
    image: b4bz/homer:latest
    container_name: homer
    ports:
      - "8081:8080"
    volumes:
      - ./conf/launchpad/config.yml:/www/assets/config.yml

  postgres:
    image: postgres:15
#    container_name: postgres_etl
    restart: always
    environment:
      POSTGRES_USER: your_user
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
#    ports:
#      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "your_user" ]
      interval: 10s
      retries: 5
    networks:
      - lakehouse


#  aio:
#    build: aio/
##    container_name: aio
#    environment:
#      - AWS_ACCESS_KEY_ID=admin
#      - AWS_SECRET_ACCESS_KEY=password
#      - AWS_REGION=us-east-1
#    volumes:
#      - ./data/html:/var/lib/ngods/html
#      - ./data/stage:/var/lib/ngods/stage
#      - ./data/spark/notebooks:/var/lib/ngods/notebooks
#    ports:
#      - '8888:8888' # Spark notebook port
#      - '7077:7077' # Spark port
#      - '8061:8061' # Spark master web ui port
#      - '8062:8062' # Spark worker web ui port
#      - '18080:18080' # Spark history web ui port
#    networks:
#      lakehouse:
#    command:
#      - notebook
#    depends_on:
#      postgres:
#        condition: service_healthy
#      storage:
#        condition: service_healthy

volumes:
  postgres_data:

networks:
  lakehouse:
